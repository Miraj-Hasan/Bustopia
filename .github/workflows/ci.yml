name: Bustopia CI

# ────────────────
# Triggers
# ────────────────
on:
  push:
    branches: [ "main" ]          # build every commit on main
  pull_request:
    branches: [ "main" ]          # build PRs targeting main

env:
  REGISTRY: docker.io
  IMAGE_BACKEND: fiihad/bustopia-backend
  IMAGE_FRONTEND: fiihad/bustopia-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read               # checkout
      packages: write              # needed by docker/login-action
    steps:
      # 1. Check out code
      - uses: actions/checkout@v4

      # 2. Set up Docker Buildx (modern builder with caching)
      - uses: docker/setup-buildx-action@v3

      # 3. Log in to Docker Hub
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Build & push BACKEND
      - name: Build & push backend
        uses: docker/build-push-action@v5
        with:
          context: ./BusTopia Backend
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:latest
            ${{ env.IMAGE_BACKEND }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache,mode=max

      # 5. Build & push FRONTEND
      - name: Build & push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./Bustopia FrontEnd
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND }}:latest
            ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache,mode=max

  e2e-tests:
    name: Run Cypress E2E against pushed images
    runs-on: ubuntu-latest
    needs: build-and-push

    services:
      backend:
        image: ${{ env.IMAGE_BACKEND }}:latest
        ports:
          - 8443:8443
        env:
          # map each secret into the container
          FRONTEND_ORIGIN: https://localhost:3000
          BACKEND_ORIGIN: https://localhost:8443
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        options: >-
          --health-cmd="curl -f http://localhost:8443/actuator/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      frontend:
        image: ${{ env.IMAGE_FRONTEND }}:latest
        ports:
          - 3000:443
        depends_on:
          - backend
        options: >-
          --health-cmd="curl -f http://localhost:3000/ || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend on port 8443…"
          until nc -z localhost 8443; do sleep 1; done

      - name: Wait for frontend to be ready
        run: |
          echo "Waiting for frontend on port 3000…"
          until nc -z localhost 3000; do sleep 1; done

      - name: Install dependencies & run Cypress
        working-directory: ./Bustopia\ FrontEnd
        
        run: |
          npm ci
          npm run build
          npm run test:ci

