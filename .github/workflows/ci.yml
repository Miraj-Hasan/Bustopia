name: Bustopia CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_BACKEND: fiihad/bustopia-backend
  IMAGE_FRONTEND: fiihad/bustopia-frontend

jobs:
# ──────────────────────────────────────────────
# 1. BACKEND UNIT TESTS  (WITH LOCAL POSTGRES)
# ──────────────────────────────────────────────
  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: bustopia
          POSTGRES_USER: ciuser
          POSTGRES_PASSWORD: cipass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ciuser -d bustopia"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"      # change if you use 17/11/8

      - name: Cache Maven repo
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Run Maven tests (pointing to local Postgres)
        working-directory: "BusTopia Backend"
        env:
          DB_URL: jdbc:postgresql://localhost:5432/bustopia
          DB_USER: ciuser
          DB_PASS: cipass
        run: mvn -B test

# ──────────────────────────────────────────────
# 2. BUILD IMAGES (unchanged)
# ──────────────────────────────────────────────
  build-images:
    needs: backend-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./BusTopia Backend
          push: false
          tags: ${{ env.IMAGE_BACKEND }}:${{ github.sha }}

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./Bustopia FrontEnd
          push: false
          tags: ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}

# ──────────────────────────────────────────────
# 3. INTEGRATION TESTS (unchanged)
# ──────────────────────────────────────────────
  integration-tests:
    needs: build-images
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: bustopia
          POSTGRES_USER: ciuser
          POSTGRES_PASSWORD: cipass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ciuser -d bustopia"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Start backend container
        env:
          DB_URL: jdbc:postgresql://host.docker.internal:5432/bustopia
          DB_USER: ciuser
          DB_PASS: cipass
        run: |
          docker run -d --name backend -p 8080:8080 \
            -e SPRING_DATASOURCE_URL=$DB_URL \
            -e SPRING_DATASOURCE_USERNAME=$DB_USER \
            -e SPRING_DATASOURCE_PASSWORD=$DB_PASS \
            ${{ env.IMAGE_BACKEND }}:${{ github.sha }}

          echo "Waiting for backend …"
          for i in {1..20}; do
            if curl --silent http://localhost:8080/api/ping; then exit 0; fi
            sleep 3
          done
          echo "Backend ping failed"; docker logs backend; exit 1

      - name: Start frontend container
        run: |
          docker run -d --name frontend -p 3001:80 \
            ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}
          curl --fail --retry 5 --retry-delay 3 http://localhost:3001/

      - name: Clean up
        if: always()
        run: docker rm -f backend frontend

# ──────────────────────────────────────────────
# 4. PUSH IMAGES (unchanged)
# ──────────────────────────────────────────────
  push-images:
    needs: integration-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag & push backend
        run: |
          docker tag ${{ env.IMAGE_BACKEND }}:${{ github.sha }} ${{ env.IMAGE_BACKEND }}:latest
          docker push --all-tags ${{ env.IMAGE_BACKEND }}

      - name: Tag & push frontend
        run: |
          docker tag ${{ env.IMAGE_FRONTEND }}:${{ github.sha }} ${{ env.IMAGE_FRONTEND }}:latest
          docker push --all-tags ${{ env.IMAGE_FRONTEND }}
